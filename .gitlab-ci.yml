image: yourlabs/python

build:
  image: docker:dind
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

qa:
  stage: test
  script: flake8 --exclude migrations,djwebdapp_example src djwebdapp_demo

docs:
  stage: test
  script:
  - pip install sphinx -r docs/requirements.txt
  - cd docs && make html SPHINXOPTS="-W --keep-going -n"

# The following job tests tezos, it's a bit complicated to debug so I'll
# document it here.
#
# Build the local test image as such:
#
# docker build -t djwebdapp .
#
# Then, change the job image to be "djwebdapp" in the following config.
#
# Finnally, you can run:
#
# gitlab-runner exec docker --docker-pull-policy=if-not-present test
#
# This will execute the same as the gitlab server but on your local
# workstation. You'll then be able to enter the containers and debug them from
# the inside.
test:
  stage: test
  script: py.test -sv --cov=/app/src  --cov-report xml --cov-report term-missing tests
  image: $CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}

  variables:
    FF_NETWORK_PER_BUILD: "1"

  artifacts:
    reports:
      cobertura: coverage.xml

  services:
  - alias: tzlocal
    name: yourlabs/tezos
  - alias: ethlocal
    name: ethereum/client-go
    command:
    - "--dev"
    - "--networkid=17"
    - "--nodiscover"
    - "--maxpeers=0"
    - "--http"
    - "--http.addr=0.0.0.0"
    - "--http.corsdomain=*"
    - "--http.vhosts=*"
    - "--http.api=eth,net,web3,personal,miner"
    - "--miner.gasprice=0"
    - "--ws"
    - "--ws.addr=0.0.0.0"
    - "--nousb"
    - "--gcmode=archive"

pypi:
  stage: deploy
  script: pypi-release
  only: [tags]
